!function(factory) {
  if ("function" == typeof define && define.amd) {
    define(["jquery"], factory);
  } else {
    factory("undefined" != typeof jQuery ? jQuery : window.Zepto);
  }
}(function($) {
  /**
   * @param {Event} e
   * @return {undefined}
   */
  function doAjaxSubmit(e) {
    var options = e.data;
    if (!e.isDefaultPrevented()) {
      e.preventDefault();
      $(e.target).ajaxSubmit(options);
    }
  }
  /**
   * @param {Object} e
   * @return {undefined}
   */
  function captureSubmittingElement(e) {
    var target = e.target;
    var $el = $(target);
    if (!$el.is("[type=submit],[type=image]")) {
      var firstTargetGroup = $el.closest("[type=submit]");
      if (0 === firstTargetGroup.length) {
        return;
      }
      target = firstTargetGroup[0];
    }
    var form = this;
    if (form.clk = target, "image" == target.type) {
      if (void 0 !== e.offsetX) {
        form.clk_x = e.offsetX;
        form.clk_y = e.offsetY;
      } else {
        if ("function" == typeof $.fn.offset) {
          var off = $el.offset();
          /** @type {number} */
          form.clk_x = e.pageX - off.left;
          /** @type {number} */
          form.clk_y = e.pageY - off.top;
        } else {
          /** @type {number} */
          form.clk_x = e.pageX - target.offsetLeft;
          /** @type {number} */
          form.clk_y = e.pageY - target.offsetTop;
        }
      }
    }
    setTimeout(function() {
      /** @type {null} */
      form.clk = form.clk_x = form.clk_y = null;
    }, 100);
  }
  /**
   * @return {undefined}
   */
  function log() {
    if ($.fn.ajaxSubmit.debug) {
      /** @type {string} */
      var fmt = "[jquery.form] " + Array.prototype.join.call(arguments, "");
      if (window.console && window.console.log) {
        window.console.log(fmt);
      } else {
        if (window.opera) {
          if (window.opera.postError) {
            window.opera.postError(fmt);
          }
        }
      }
    }
  }
  var feature = {};
  /** @type {boolean} */
  feature.fileapi = void 0 !== $("<input type='file'/>").get(0).files;
  /** @type {boolean} */
  feature.formdata = void 0 !== window.FormData;
  /** @type {boolean} */
  var f = !!$.fn.prop;
  /**
   * @return {?}
   */
  $.fn.attr2 = function() {
    if (!f) {
      return this.attr.apply(this, arguments);
    }
    var val = this.prop.apply(this, arguments);
    return val && val.jquery || "string" == typeof val ? val : this.attr.apply(this, arguments);
  };
  /**
   * @param {Object} options
   * @return {?}
   */
  $.fn.ajaxSubmit = function(options) {
    /**
     * @param {?} extraData
     * @return {?}
     */
    function deepSerialize(extraData) {
      var i;
      var part;
      var attrList = $.param(extraData, options.traditional).split("&");
      var l = attrList.length;
      /** @type {Array} */
      var result = [];
      /** @type {number} */
      i = 0;
      for (;l > i;i++) {
        attrList[i] = attrList[i].replace(/\+/g, " ");
        part = attrList[i].split("=");
        result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);
      }
      return result;
    }
    /**
     * @param {Array} a
     * @return {?}
     */
    function fileUploadXhr(a) {
      /** @type {FormData} */
      var data = new FormData;
      /** @type {number} */
      var i = 0;
      for (;i < a.length;i++) {
        data.append(a[i].name, a[i].value);
      }
      if (options.extraData) {
        var codeSegments = deepSerialize(options.extraData);
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          if (codeSegments[i]) {
            data.append(codeSegments[i][0], codeSegments[i][1]);
          }
        }
      }
      /** @type {null} */
      options.data = null;
      var s = $.extend(true, {}, $.ajaxSettings, options, {
        contentType : false,
        processData : false,
        cache : false,
        type : type || "POST"
      });
      if (options.uploadProgress) {
        /**
         * @return {?}
         */
        s.xhr = function() {
          var xhr = $.ajaxSettings.xhr();
          return xhr.upload && xhr.upload.addEventListener("progress", function(event) {
            /** @type {number} */
            var percent = 0;
            var position = event.loaded || event.position;
            var total = event.total;
            if (event.lengthComputable) {
              /** @type {number} */
              percent = Math.ceil(position / total * 100);
            }
            options.uploadProgress(event, position, total, percent);
          }, false), xhr;
        };
      }
      /** @type {null} */
      s.data = null;
      /** @type {function (?, MessageEvent): undefined} */
      var beforeSend = s.beforeSend;
      return s.beforeSend = function(xhr, opts) {
        opts.data = options.formData ? options.formData : data;
        if (beforeSend) {
          beforeSend.call(this, xhr, opts);
        }
      }, $.ajax(s);
    }
    /**
     * @param {?} a
     * @return {?}
     */
    function fileUploadIframe(a) {
      /**
       * @param {Element} frame
       * @return {?}
       */
      function getDoc(frame) {
        /** @type {null} */
        var doc = null;
        try {
          if (frame.contentWindow) {
            doc = frame.contentWindow.document;
          }
        } catch (err) {
          log("cannot get iframe.contentWindow document: " + err);
        }
        if (doc) {
          return doc;
        }
        try {
          doc = frame.contentDocument ? frame.contentDocument : frame.document;
        } catch (isXml) {
          log("cannot get iframe.contentDocument: " + isXml);
          doc = frame.document;
        }
        return doc;
      }
      /**
       * @return {undefined}
       */
      function doSubmit() {
        /**
         * @return {undefined}
         */
        function checkState() {
          try {
            var state = getDoc(io).readyState;
            log("state = " + state);
            if (state) {
              if ("uninitialized" == state.toLowerCase()) {
                setTimeout(checkState, 50);
              }
            }
          } catch (e) {
            log("Server abort: ", e, " (", e.name, ")");
            cb(SERVER_ABORT);
            if (tref) {
              clearTimeout(tref);
            }
            tref = void 0;
          }
        }
        var t = $form.attr2("target");
        var a = $form.attr2("action");
        /** @type {string} */
        var mp = "multipart/form-data";
        var queryString = $form.attr("enctype") || ($form.attr("encoding") || mp);
        form.setAttribute("target", id);
        if (!type || /post/i.test(type)) {
          form.setAttribute("method", "POST");
        }
        if (a != s.url) {
          form.setAttribute("action", s.url);
        }
        if (!s.skipEncodingOverride) {
          if (!(type && !/post/i.test(type))) {
            $form.attr({
              encoding : "multipart/form-data",
              enctype : "multipart/form-data"
            });
          }
        }
        if (s.timeout) {
          /** @type {number} */
          tref = setTimeout(function() {
            /** @type {boolean} */
            v = true;
            cb(CLIENT_TIMEOUT_ABORT);
          }, s.timeout);
        }
        /** @type {Array} */
        var scripts = [];
        try {
          if (s.extraData) {
            var n;
            for (n in s.extraData) {
              if (s.extraData.hasOwnProperty(n)) {
                if ($.isPlainObject(s.extraData[n]) && (s.extraData[n].hasOwnProperty("name") && s.extraData[n].hasOwnProperty("value"))) {
                  scripts.push($('<input type="hidden" name="' + s.extraData[n].name + '">').val(s.extraData[n].value).appendTo(form)[0]);
                } else {
                  scripts.push($('<input type="hidden" name="' + n + '">').val(s.extraData[n]).appendTo(form)[0]);
                }
              }
            }
          }
          if (!s.iframeTarget) {
            $io.appendTo("body");
          }
          if (io.attachEvent) {
            io.attachEvent("onload", cb);
          } else {
            io.addEventListener("load", cb, false);
          }
          setTimeout(checkState, 15);
          try {
            form.submit();
          } catch (p) {
            var submitFn = document.createElement("form").submit;
            submitFn.apply(form);
          }
        } finally {
          form.setAttribute("action", a);
          form.setAttribute("enctype", queryString);
          if (t) {
            form.setAttribute("target", t);
          } else {
            $form.removeAttr("target");
          }
          $(scripts).remove();
        }
      }
      /**
       * @param {number} e
       * @return {?}
       */
      function cb(e) {
        if (!xhr.aborted && !F) {
          if (doc = getDoc(io), doc || (log("cannot access response document"), e = SERVER_ABORT), e === CLIENT_TIMEOUT_ABORT && xhr) {
            return xhr.abort("timeout"), deferred.reject(xhr, "timeout"), void 0;
          }
          if (e == SERVER_ABORT && xhr) {
            return xhr.abort("server abort"), deferred.reject(xhr, "error", "server abort"), void 0;
          }
          if (doc && doc.location.href != s.iframeSrc || v) {
            if (io.detachEvent) {
              io.detachEvent("onload", cb);
            } else {
              io.removeEventListener("load", cb, false);
            }
            var errMsg;
            /** @type {string} */
            var status = "success";
            try {
              if (v) {
                throw "timeout";
              }
              var isXml = "xml" == s.dataType || (doc.XMLDocument || $.isXMLDoc(doc));
              if (log("isXml=" + isXml), !isXml && (window.opera && ((null === doc.body || !doc.body.innerHTML) && --G))) {
                return log("requeing onLoad callback, DOM not available"), setTimeout(cb, 250), void 0;
              }
              var docRoot = doc.body ? doc.body : doc.documentElement;
              xhr.responseText = docRoot ? docRoot.innerHTML : null;
              xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
              if (isXml) {
                /** @type {string} */
                s.dataType = "xml";
              }
              /**
               * @param {string} header
               * @return {?}
               */
              xhr.getResponseHeader = function(header) {
                var formHeaders = {
                  "content-type" : s.dataType
                };
                return formHeaders[header.toLowerCase()];
              };
              if (docRoot) {
                xhr.status = Number(docRoot.getAttribute("status")) || xhr.status;
                xhr.statusText = docRoot.getAttribute("statusText") || xhr.statusText;
              }
              var dt = (s.dataType || "").toLowerCase();
              /** @type {boolean} */
              var scr = /(json|script|text)/.test(dt);
              if (scr || s.textarea) {
                var ta = doc.getElementsByTagName("textarea")[0];
                if (ta) {
                  xhr.responseText = ta.value;
                  xhr.status = Number(ta.getAttribute("status")) || xhr.status;
                  xhr.statusText = ta.getAttribute("statusText") || xhr.statusText;
                } else {
                  if (scr) {
                    var pre = doc.getElementsByTagName("pre")[0];
                    var b = doc.getElementsByTagName("body")[0];
                    if (pre) {
                      xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
                    } else {
                      if (b) {
                        xhr.responseText = b.textContent ? b.textContent : b.innerText;
                      }
                    }
                  }
                }
              } else {
                if ("xml" == dt) {
                  if (!xhr.responseXML) {
                    if (xhr.responseText) {
                      xhr.responseXML = toXml(xhr.responseText);
                    }
                  }
                }
              }
              try {
                data = httpData(xhr, dt, s);
              } catch (rstatus) {
                /** @type {string} */
                status = "parsererror";
                xhr.error = errMsg = rstatus || status;
              }
            } catch (err) {
              log("error caught: ", err);
              /** @type {string} */
              status = "error";
              xhr.error = errMsg = err || status;
            }
            if (xhr.aborted) {
              log("upload aborted");
              /** @type {null} */
              status = null;
            }
            if (xhr.status) {
              /** @type {string} */
              status = xhr.status >= 200 && xhr.status < 300 || 304 === xhr.status ? "success" : "error";
            }
            if ("success" === status) {
              if (s.success) {
                s.success.call(s.context, data, "success", xhr);
              }
              deferred.resolve(xhr.responseText, "success", xhr);
              if (g) {
                $.event.trigger("ajaxSuccess", [xhr, s]);
              }
            } else {
              if (status) {
                if (void 0 === errMsg) {
                  errMsg = xhr.statusText;
                }
                if (s.error) {
                  s.error.call(s.context, xhr, status, errMsg);
                }
                deferred.reject(xhr, "error", errMsg);
                if (g) {
                  $.event.trigger("ajaxError", [xhr, s, errMsg]);
                }
              }
            }
            if (g) {
              $.event.trigger("ajaxComplete", [xhr, s]);
            }
            if (g) {
              if (!--$.active) {
                $.event.trigger("ajaxStop");
              }
            }
            if (s.complete) {
              s.complete.call(s.context, xhr, status);
            }
            /** @type {boolean} */
            F = true;
            if (s.timeout) {
              clearTimeout(tref);
            }
            setTimeout(function() {
              if (s.iframeTarget) {
                $io.attr("src", s.iframeSrc);
              } else {
                $io.remove();
              }
              /** @type {null} */
              xhr.responseXML = null;
            }, 100);
          }
        }
      }
      var $button;
      var i;
      var s;
      var g;
      var id;
      var $io;
      var io;
      var xhr;
      var sub;
      var n;
      var v;
      var tref;
      var form = $form[0];
      var deferred = $.Deferred();
      if (deferred.abort = function(text) {
        xhr.abort(text);
      }, a) {
        /** @type {number} */
        i = 0;
        for (;i < resultItems.length;i++) {
          $button = $(resultItems[i]);
          if (f) {
            $button.prop("disabled", false);
          } else {
            $button.removeAttr("disabled");
          }
        }
      }
      if (s = $.extend(true, {}, $.ajaxSettings, options), s.context = s.context || s, id = "jqFormIO" + (new Date).getTime(), s.iframeTarget ? ($io = $(s.iframeTarget), n = $io.attr2("name"), n ? id = n : $io.attr2("name", id)) : ($io = $('<iframe name="' + id + '" src="' + s.iframeSrc + '" />'), $io.css({
        position : "absolute",
        top : "-1000px",
        left : "-1000px"
      })), io = $io[0], xhr = {
        aborted : 0,
        responseText : null,
        responseXML : null,
        status : 0,
        statusText : "n/a",
        /**
         * @return {undefined}
         */
        getAllResponseHeaders : function() {
        },
        /**
         * @return {undefined}
         */
        getResponseHeader : function() {
        },
        /**
         * @return {undefined}
         */
        setRequestHeader : function() {
        },
        /**
         * @param {string} message
         * @return {undefined}
         */
        abort : function(message) {
          /** @type {string} */
          var error = "timeout" === message ? "timeout" : "aborted";
          log("aborting upload... " + error);
          /** @type {number} */
          this.aborted = 1;
          try {
            if (io.contentWindow.document.execCommand) {
              io.contentWindow.document.execCommand("Stop");
            }
          } catch (e) {
          }
          $io.attr("src", s.iframeSrc);
          /** @type {string} */
          xhr.error = error;
          if (s.error) {
            s.error.call(s.context, xhr, error, message);
          }
          if (g) {
            $.event.trigger("ajaxError", [xhr, s, error]);
          }
          if (s.complete) {
            s.complete.call(s.context, xhr, error);
          }
        }
      }, g = s.global, g && (0 === $.active++ && $.event.trigger("ajaxStart")), g && $.event.trigger("ajaxSend", [xhr, s]), s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
        return s.global && $.active--, deferred.reject(), deferred;
      }
      if (xhr.aborted) {
        return deferred.reject(), deferred;
      }
      sub = form.clk;
      if (sub) {
        n = sub.name;
        if (n) {
          if (!sub.disabled) {
            s.extraData = s.extraData || {};
            s.extraData[n] = sub.value;
            if ("image" == sub.type) {
              s.extraData[n + ".x"] = form.clk_x;
              s.extraData[n + ".y"] = form.clk_y;
            }
          }
        }
      }
      /** @type {number} */
      var CLIENT_TIMEOUT_ABORT = 1;
      /** @type {number} */
      var SERVER_ABORT = 2;
      var c = $("meta[name=csrf-token]").attr("content");
      var p = $("meta[name=csrf-param]").attr("content");
      if (p) {
        if (c) {
          s.extraData = s.extraData || {};
          s.extraData[p] = c;
        }
      }
      if (s.forceSync) {
        doSubmit();
      } else {
        setTimeout(doSubmit, 10);
      }
      var data;
      var doc;
      var F;
      /** @type {number} */
      var G = 50;
      var toXml = $.parseXML || function(s, doc) {
        return window.ActiveXObject ? (doc = new ActiveXObject("Microsoft.XMLDOM"), doc.async = "false", doc.loadXML(s)) : doc = (new DOMParser).parseFromString(s, "text/xml"), doc && (doc.documentElement && "parsererror" != doc.documentElement.nodeName) ? doc : null;
      };
      var parseJSON = $.parseJSON || function(_xhr) {
        return window.eval("(" + _xhr + ")");
      };
      /**
       * @param {Object} xhr
       * @param {string} type
       * @param {(Error|string)} s
       * @return {?}
       */
      var httpData = function(xhr, type, s) {
        var ct = xhr.getResponseHeader("content-type") || "";
        /** @type {boolean} */
        var xml = "xml" === type || !type && ct.indexOf("xml") >= 0;
        var data = xml ? xhr.responseXML : xhr.responseText;
        return xml && ("parsererror" === data.documentElement.nodeName && ($.error && $.error("parsererror"))), s && (s.dataFilter && (data = s.dataFilter(data, type))), "string" == typeof data && ("json" === type || !type && ct.indexOf("json") >= 0 ? data = parseJSON(data) : ("script" === type || !type && ct.indexOf("javascript") >= 0) && $.globalEval(data)), data;
      };
      return deferred;
    }
    if (!this.length) {
      return log("ajaxSubmit: skipping submit process - no element selected"), this;
    }
    var type;
    var line;
    var url;
    var $form = this;
    if ("function" == typeof options) {
      options = {
        success : options
      };
    } else {
      if (void 0 === options) {
        options = {};
      }
    }
    type = options.type || this.attr2("method");
    line = options.url || this.attr2("action");
    url = "string" == typeof line ? $.trim(line) : "";
    url = url || (window.location.href || "");
    if (url) {
      url = (url.match(/^([^#]+)/) || [])[1];
    }
    options = $.extend(true, {
      url : url,
      success : $.ajaxSettings.success,
      type : type || $.ajaxSettings.type,
      iframeSrc : /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank"
    }, options);
    var veto = {};
    if (this.trigger("form-pre-serialize", [this, options, veto]), veto.veto) {
      return log("ajaxSubmit: submit vetoed via form-pre-serialize trigger"), this;
    }
    if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
      return log("ajaxSubmit: submit aborted via beforeSerialize callback"), this;
    }
    var traditional = options.traditional;
    if (void 0 === traditional) {
      traditional = $.ajaxSettings.traditional;
    }
    var qx;
    /** @type {Array} */
    var resultItems = [];
    var a = this.formToArray(options.semantic, resultItems);
    if (options.data && (options.extraData = options.data, qx = $.param(options.data, traditional)), options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
      return log("ajaxSubmit: submit aborted via beforeSubmit callback"), this;
    }
    if (this.trigger("form-submit-validate", [a, this, options, veto]), veto.veto) {
      return log("ajaxSubmit: submit vetoed via form-submit-validate trigger"), this;
    }
    var q = $.param(a, traditional);
    if (qx) {
      q = q ? q + "&" + qx : qx;
    }
    if ("GET" == options.type.toUpperCase()) {
      options.url += (options.url.indexOf("?") >= 0 ? "&" : "?") + q;
      /** @type {null} */
      options.data = null;
    } else {
      options.data = q;
    }
    /** @type {Array} */
    var callbacks = [];
    if (options.resetForm && callbacks.push(function() {
      $form.resetForm();
    }), options.clearForm && callbacks.push(function() {
      $form.clearForm(options.includeHidden);
    }), !options.dataType && options.target) {
      var which = options.success || function() {
      };
      callbacks.push(function(data) {
        /** @type {string} */
        var fn = options.replaceTarget ? "replaceWith" : "html";
        $(options.target)[fn](data).each(which, arguments);
      });
    } else {
      if (options.success) {
        callbacks.push(options.success);
      }
    }
    if (options.success = function(status, textStatus, xhr) {
      var newArgs = options.context || this;
      /** @type {number} */
      var i = 0;
      /** @type {number} */
      var l = callbacks.length;
      for (;l > i;i++) {
        callbacks[i].apply(newArgs, [status, textStatus, xhr || $form, $form]);
      }
    }, options.error) {
      var oldError = options.error;
      /**
       * @param {string} xhr
       * @param {?} status
       * @param {?} error
       * @return {undefined}
       */
      options.error = function(xhr, status, error) {
        var context = options.context || this;
        oldError.apply(context, [xhr, status, error, $form]);
      };
    }
    if (options.complete) {
      var oldComplete = options.complete;
      /**
       * @param {?} xhr
       * @param {?} status
       * @return {undefined}
       */
      options.complete = function(xhr, status) {
        var context = options.context || this;
        oldComplete.apply(context, [xhr, status, $form]);
      };
    }
    var codeSegments = $("input[type=file]:enabled", this).filter(function() {
      return "" !== $(this).val();
    });
    /** @type {boolean} */
    var hasFileInputs = codeSegments.length > 0;
    /** @type {string} */
    var mp = "multipart/form-data";
    /** @type {boolean} */
    var multipart = $form.attr("enctype") == mp || $form.attr("encoding") == mp;
    /** @type {boolean} */
    var fileAPI = feature.fileapi && feature.formdata;
    log("fileAPI :" + fileAPI);
    var jqxhr;
    /** @type {boolean} */
    var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;
    if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
      if (options.closeKeepAlive) {
        $.get(options.closeKeepAlive, function() {
          jqxhr = fileUploadIframe(a);
        });
      } else {
        jqxhr = fileUploadIframe(a);
      }
    } else {
      jqxhr = (hasFileInputs || multipart) && fileAPI ? fileUploadXhr(a) : $.ajax(options);
    }
    $form.removeData("jqxhr").data("jqxhr", jqxhr);
    /** @type {number} */
    var i = 0;
    for (;i < resultItems.length;i++) {
      /** @type {null} */
      resultItems[i] = null;
    }
    return this.trigger("form-submit-notify", [this, options]), this;
  };
  /**
   * @param {Object} options
   * @return {?}
   */
  $.fn.ajaxForm = function(options) {
    if (options = options || {}, options.delegation = options.delegation && $.isFunction($.fn.on), !options.delegation && 0 === this.length) {
      var o = {
        s : this.selector,
        c : this.context
      };
      return!$.isReady && o.s ? (log("DOM not ready, queuing ajaxForm"), $(function() {
        $(o.s, o.c).ajaxForm(options);
      }), this) : (log("terminating; zero elements found by selector" + ($.isReady ? "" : " (DOM not ready)")), this);
    }
    return options.delegation ? ($(document).off("submit.form-plugin", this.selector, doAjaxSubmit).off("click.form-plugin", this.selector, captureSubmittingElement).on("submit.form-plugin", this.selector, options, doAjaxSubmit).on("click.form-plugin", this.selector, options, captureSubmittingElement), this) : this.ajaxFormUnbind().bind("submit.form-plugin", options, doAjaxSubmit).bind("click.form-plugin", options, captureSubmittingElement);
  };
  /**
   * @return {?}
   */
  $.fn.ajaxFormUnbind = function() {
    return this.unbind("submit.form-plugin click.form-plugin");
  };
  /**
   * @param {Object} semantic
   * @param {Array} elements
   * @return {?}
   */
  $.fn.formToArray = function(semantic, elements) {
    /** @type {Array} */
    var a = [];
    if (0 === this.length) {
      return a;
    }
    var els2;
    var form = this[0];
    var data = this.attr("id");
    var els = semantic ? form.getElementsByTagName("*") : form.elements;
    if (els && (els = $(els).get()), data && (els2 = $(":input[form=" + data + "]").get(), els2.length && (els = (els || []).concat(els2))), !els || !els.length) {
      return a;
    }
    var i;
    var j;
    var n;
    var v;
    var el;
    var k;
    var jmax;
    /** @type {number} */
    i = 0;
    k = els.length;
    for (;k > i;i++) {
      if (el = els[i], n = el.name, n && !el.disabled) {
        if (semantic && (form.clk && "image" == el.type)) {
          if (form.clk == el) {
            a.push({
              name : n,
              value : $(el).val(),
              type : el.type
            });
            a.push({
              name : n + ".x",
              value : form.clk_x
            }, {
              name : n + ".y",
              value : form.clk_y
            });
          }
        } else {
          if (v = $.fieldValue(el, true), v && v.constructor == Array) {
            if (elements) {
              elements.push(el);
            }
            /** @type {number} */
            j = 0;
            jmax = v.length;
            for (;jmax > j;j++) {
              a.push({
                name : n,
                value : v[j]
              });
            }
          } else {
            if (feature.fileapi && "file" == el.type) {
              if (elements) {
                elements.push(el);
              }
              var files = el.files;
              if (files.length) {
                /** @type {number} */
                j = 0;
                for (;j < files.length;j++) {
                  a.push({
                    name : n,
                    value : files[j],
                    type : el.type
                  });
                }
              } else {
                a.push({
                  name : n,
                  value : "",
                  type : el.type
                });
              }
            } else {
              if (null !== v) {
                if ("undefined" != typeof v) {
                  if (elements) {
                    elements.push(el);
                  }
                  a.push({
                    name : n,
                    value : v,
                    type : el.type,
                    required : el.required
                  });
                }
              }
            }
          }
        }
      }
    }
    if (!semantic && form.clk) {
      var $input = $(form.clk);
      var input = $input[0];
      n = input.name;
      if (n) {
        if (!input.disabled) {
          if ("image" == input.type) {
            a.push({
              name : n,
              value : $input.val()
            });
            a.push({
              name : n + ".x",
              value : form.clk_x
            }, {
              name : n + ".y",
              value : form.clk_y
            });
          }
        }
      }
    }
    return a;
  };
  /**
   * @param {Object} semantic
   * @return {?}
   */
  $.fn.formSerialize = function(semantic) {
    return $.param(this.formToArray(semantic));
  };
  /**
   * @param {boolean} successful
   * @return {?}
   */
  $.fn.fieldSerialize = function(successful) {
    /** @type {Array} */
    var a = [];
    return this.each(function() {
      var n = this.name;
      if (n) {
        var v = $.fieldValue(this, successful);
        if (v && v.constructor == Array) {
          /** @type {number} */
          var j = 0;
          var spaces = v.length;
          for (;spaces > j;j++) {
            a.push({
              name : n,
              value : v[j]
            });
          }
        } else {
          if (null !== v) {
            if ("undefined" != typeof v) {
              a.push({
                name : this.name,
                value : v
              });
            }
          }
        }
      }
    }), $.param(a);
  };
  /**
   * @param {Object} successful
   * @return {?}
   */
  $.fn.fieldValue = function(successful) {
    /** @type {Array} */
    var ret = [];
    /** @type {number} */
    var i = 0;
    var l = this.length;
    for (;l > i;i++) {
      var el = this[i];
      var v = $.fieldValue(el, successful);
      if (!(null === v)) {
        if (!("undefined" == typeof v)) {
          if (!(v.constructor == Array && !v.length)) {
            if (v.constructor == Array) {
              $.merge(ret, v);
            } else {
              ret.push(v);
            }
          }
        }
      }
    }
    return ret;
  };
  /**
   * @param {Element} el
   * @param {boolean} successful
   * @return {?}
   */
  $.fieldValue = function(el, successful) {
    var n = el.name;
    var type = el.type;
    var all = el.tagName.toLowerCase();
    if (void 0 === successful && (successful = true), successful && (!n || (el.disabled || ("reset" == type || ("button" == type || (("checkbox" == type || "radio" == type) && !el.checked || (("submit" == type || "image" == type) && (el.form && el.form.clk != el) || "select" == all && -1 == el.selectedIndex))))))) {
      return null;
    }
    if ("select" == all) {
      var from = el.selectedIndex;
      if (0 > from) {
        return null;
      }
      /** @type {Array} */
      var a = [];
      var o = el.options;
      /** @type {boolean} */
      var hasIndex = "select-one" == type;
      var l = hasIndex ? from + 1 : o.length;
      var i = hasIndex ? from : 0;
      for (;l > i;i++) {
        var option = o[i];
        if (option.selected) {
          var val = option.value;
          if (val || (val = option.attributes && (option.attributes.value && !option.attributes.value.specified) ? option.text : option.value), hasIndex) {
            return val;
          }
          a.push(val);
        }
      }
      return a;
    }
    return $(el).val();
  };
  /**
   * @param {?} includeHidden
   * @return {?}
   */
  $.fn.clearForm = function(includeHidden) {
    return this.each(function() {
      $("input,select,textarea", this).clearFields(includeHidden);
    });
  };
  /** @type {function (boolean): ?} */
  $.fn.clearFields = $.fn.clearInputs = function(until) {
    /** @type {RegExp} */
    var exclude = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
    return this.each(function() {
      var type = this.type;
      var name = this.tagName.toLowerCase();
      if (exclude.test(type) || "textarea" == name) {
        /** @type {string} */
        this.value = "";
      } else {
        if ("checkbox" == type || "radio" == type) {
          /** @type {boolean} */
          this.checked = false;
        } else {
          if ("select" == name) {
            /** @type {number} */
            this.selectedIndex = -1;
          } else {
            if ("file" == type) {
              if (/MSIE/.test(navigator.userAgent)) {
                $(this).replaceWith($(this).clone(true));
              } else {
                $(this).val("");
              }
            } else {
              if (until) {
                if (until === true && /hidden/.test(type) || "string" == typeof until && $(this).is(until)) {
                  /** @type {string} */
                  this.value = "";
                }
              }
            }
          }
        }
      }
    });
  };
  /**
   * @return {?}
   */
  $.fn.resetForm = function() {
    return this.each(function() {
      if ("function" == typeof this.reset || "object" == typeof this.reset && !this.reset.nodeType) {
        this.reset();
      }
    });
  };
  /**
   * @param {boolean} b
   * @return {?}
   */
  $.fn.enable = function(b) {
    return void 0 === b && (b = true), this.each(function() {
      /** @type {boolean} */
      this.disabled = !b;
    });
  };
  /**
   * @param {boolean} a
   * @return {?}
   */
  $.fn.selected = function(a) {
    return void 0 === a && (a = true), this.each(function() {
      var type = this.type;
      if ("checkbox" == type || "radio" == type) {
        this.checked = a;
      } else {
        if ("option" == this.tagName.toLowerCase()) {
          var $select = $(this).parent("select");
          if (a) {
            if ($select[0]) {
              if ("select-one" == $select[0].type) {
                $select.find("option").selected(false);
              }
            }
          }
          /** @type {boolean} */
          this.selected = a;
        }
      }
    });
  };
  /** @type {boolean} */
  $.fn.ajaxSubmit.debug = false;
});
